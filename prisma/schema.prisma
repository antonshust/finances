// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstName     String?   // Имя пользователя
    lastName      String?   // Фамилия пользователя
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    transactions  Transaction[] // Связь с транзакциями
    categories    Category[] // Связь с категориями
    budgets       Budget[] // Связь с бюджетами
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Модели для управления личными финансами

model Transaction {
    id          String   @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount      String
    description String?  
    date        DateTime @default(now())
    categoryId  String? 
    category    Category? @relation(fields: [categoryId], references: [id])
    type        TransactionType 
    @@index([userId]) 
    @@index([categoryId])
}

enum TransactionType {
    INCOME
    EXPENSE
}

model Category {
    id          String        @id @default(cuid())
    userId      String
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    name        String
    description String?
    type        CategoryType  
    transactions Transaction[] 
    budgets     Budget[]      
    @@unique([userId, name]) 
    @@index([userId])
}

enum CategoryType {
    INCOME
    EXPENSE
}

model Budget {
    id          String       @id @default(cuid())
    userId      String
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    categoryId  String
    category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    amount      String
    startDate   DateTime     @default(now())
    endDate     DateTime
    @@index([userId])
    @@index([categoryId])
}